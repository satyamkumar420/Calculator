{"version":3,"sources":["components/DigitButton.jsx","components/OperationButton.jsx","App.js","index.js"],"names":["DigitButton","dispatch","digit","onClick","type","ACTIONS","ADD_DIGIT","payload","OperationButton","operation","CHOOSE_OPERATION","CLEAR","DELETE_DIGIT","EVALUATE","reducer","state","overwrite","currentOperand","includes","previousOperand","evaluate","length","slice","prev","parseFloat","current","isNaN","computation","toString","INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","formatOperand","operand","split","integer","decimal","format","App","useReducer","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAEe,SAASA,EAAT,GAA2C,IAApBC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAC9C,OACE,wBACEC,QAAS,kBAAMF,EAAS,CAAEG,KAAMC,EAAQC,UAAWC,QAAS,CAAEL,YADhE,SAEGA,ICJQ,SAASM,EAAT,GAAmD,IAAxBP,EAAuB,EAAvBA,SAAUQ,EAAa,EAAbA,UAClD,OACE,wBACEN,QAAS,kBACPF,EAAS,CAAEG,KAAMC,EAAQK,iBAAkBH,QAAS,CAAEE,gBAF1D,SAIGA,I,UCHMJ,EAAU,CACrBC,UAAW,YACXI,iBAAkB,mBAClBC,MAAO,QACPC,aAAc,eACdC,SAAU,YAGZ,SAASC,EAAQC,EAAjB,GAA4C,IAAlBX,EAAiB,EAAjBA,KAAMG,EAAW,EAAXA,QAE9B,OAAQH,GACN,KAAKC,EAAQC,UACX,OAAIS,EAAMC,UACD,2BACFD,GADL,IAEEE,eAAgBV,EAAQL,MACxBc,WAAW,IAGO,MAAlBT,EAAQL,OAA0C,MAAzBa,EAAME,gBAGb,MAAlBV,EAAQL,OAAiBa,EAAME,eAAeC,SAAS,KAFlDH,EAMF,2BACFA,GADL,IAEEE,eAAe,GAAD,OAAKF,EAAME,gBAAkB,IAA7B,OAAkCV,EAAQL,SAE5D,KAAKG,EAAQK,iBACX,OAA4B,MAAxBK,EAAME,gBAAmD,MAAzBF,EAAMI,gBACjCJ,EAGmB,MAAxBA,EAAME,eACD,2BACFF,GADL,IAEEN,UAAWF,EAAQE,YAIM,MAAzBM,EAAMI,gBACD,2BACFJ,GADL,IAEEN,UAAWF,EAAQE,UACnBU,gBAAiBJ,EAAME,eACvBA,eAAgB,OAIb,2BACFF,GADL,IAEEI,gBAAiBC,EAASL,GAC1BN,UAAWF,EAAQE,UACnBQ,eAAgB,OAEpB,KAAKZ,EAAQM,MACX,MAAO,GACT,KAAKN,EAAQO,aACX,OAAIG,EAAMC,UACD,2BACFD,GADL,IAEEC,WAAW,EACXC,eAAgB,OAGQ,MAAxBF,EAAME,eAA+BF,EACL,IAAhCA,EAAME,eAAeI,OAChB,2BAAKN,GAAZ,IAAmBE,eAAgB,OAG9B,2BACFF,GADL,IAEEE,eAAgBF,EAAME,eAAeK,MAAM,GAAI,KAEnD,KAAKjB,EAAQQ,SACX,OACqB,MAAnBE,EAAMN,WACkB,MAAxBM,EAAME,gBACmB,MAAzBF,EAAMI,gBAECJ,EAGF,2BACFA,GADL,IAEEC,WAAW,EACXG,gBAAiB,KACjBV,UAAW,KACXQ,eAAgBG,EAASL,MAKjC,SAASK,EAAT,GAAmE,IAA/CH,EAA8C,EAA9CA,eAAgBE,EAA8B,EAA9BA,gBAAiBV,EAAa,EAAbA,UAC7Cc,EAAOC,WAAWL,GAClBM,EAAUD,WAAWP,GAC3B,GAAIS,MAAMH,IAASG,MAAMD,GAAU,MAAO,GAC1C,IAAIE,EAAc,GAElB,OAAQlB,GACN,IAAK,IACHkB,EAAcJ,EAAOE,EACrB,MACF,IAAK,IACHE,EAAcJ,EAAOE,EACrB,MACF,IAAK,IACHE,EAAcJ,EAAOE,EACrB,MACF,IAAK,OACHE,EAAcJ,EAAOE,EAIzB,OAAOE,EAAYC,WAGrB,IAAMC,EAAoB,IAAIC,KAAKC,aAAa,QAAS,CACvDC,sBAAuB,IAEzB,SAASC,EAAcC,GACrB,GAAe,MAAXA,EAAJ,CACA,MAA2BA,EAAQC,MAAM,KAAzC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,OAAe,MAAXA,EAAwBR,EAAkBS,OAAOF,GAC/C,GAAN,OAAUP,EAAkBS,OAAOF,GAAnC,YAA+CC,IAiDlCE,MA9Cf,WACE,MAAmEC,qBACjE1B,EACA,IAFF,0BAASG,EAAT,EAASA,eAAgBE,EAAzB,EAAyBA,gBAAiBV,EAA1C,EAA0CA,UAAaR,EAAvD,KAKA,OACE,sBAAKwC,UAAU,kBAAf,UACE,sBAAKA,UAAU,SAAf,UACE,sBAAKA,UAAU,mBAAf,UACGR,EAAcd,GADjB,IACoCV,KAEpC,qBAAKgC,UAAU,kBAAf,SAAkCR,EAAchB,QAElD,wBACEwB,UAAU,WACVtC,QAAS,kBAAMF,EAAS,CAAEG,KAAMC,EAAQM,SAF1C,gBAKA,wBAAQR,QAAS,kBAAMF,EAAS,CAAEG,KAAMC,EAAQO,gBAAhD,iBAGA,cAACJ,EAAD,CAAiBC,UAAU,OAAIR,SAAUA,IACzC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IACjC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IACjC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IACjC,cAACO,EAAD,CAAiBC,UAAU,IAAIR,SAAUA,IACzC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IACjC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IACjC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IACjC,cAACO,EAAD,CAAiBC,UAAU,IAAIR,SAAUA,IACzC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IACjC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IACjC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IACjC,cAACO,EAAD,CAAiBC,UAAU,IAAIR,SAAUA,IACzC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IACjC,cAACD,EAAD,CAAaE,MAAM,IAAID,SAAUA,IACjC,wBACEwC,UAAU,WACVtC,QAAS,kBAAMF,EAAS,CAAEG,KAAMC,EAAQQ,YAF1C,mBCvKN6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.77d16131.chunk.js","sourcesContent":["import { ACTIONS } from \"../App\";\r\n\r\nexport default function DigitButton({ dispatch, digit }) {\r\n  return (\r\n    <button\r\n      onClick={() => dispatch({ type: ACTIONS.ADD_DIGIT, payload: { digit } })}>\r\n      {digit}\r\n    </button>\r\n  );\r\n}\r\n","import { ACTIONS } from \"../App\";\r\n\r\nexport default function OperationButton({ dispatch, operation }) {\r\n  return (\r\n    <button\r\n      onClick={() =>\r\n        dispatch({ type: ACTIONS.CHOOSE_OPERATION, payload: { operation } })\r\n      }>\r\n      {operation}\r\n    </button>\r\n  );\r\n}\r\n","import { useReducer } from \"react\";\r\nimport DigitButton from \"./components/DigitButton\";\r\nimport OperationButton from \"./components/OperationButton\";\r\nimport \"./components/css/styles.css\";\r\n\r\nexport const ACTIONS = {\r\n  ADD_DIGIT: \"add-digit\",\r\n  CHOOSE_OPERATION: \"choose-operation\",\r\n  CLEAR: \"clear\",\r\n  DELETE_DIGIT: \"delete-digit\",\r\n  EVALUATE: \"evaluate\",\r\n};\r\n\r\nfunction reducer(state, { type, payload }) {\r\n  // eslint-disable-next-line default-case\r\n  switch (type) {\r\n    case ACTIONS.ADD_DIGIT:\r\n      if (state.overwrite) {\r\n        return {\r\n          ...state,\r\n          currentOperand: payload.digit,\r\n          overwrite: false,\r\n        };\r\n      }\r\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") {\r\n        return state;\r\n      }\r\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\")) {\r\n        return state;\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`,\r\n      };\r\n    case ACTIONS.CHOOSE_OPERATION:\r\n      if (state.currentOperand == null && state.previousOperand == null) {\r\n        return state;\r\n      }\r\n\r\n      if (state.currentOperand == null) {\r\n        return {\r\n          ...state,\r\n          operation: payload.operation,\r\n        };\r\n      }\r\n\r\n      if (state.previousOperand == null) {\r\n        return {\r\n          ...state,\r\n          operation: payload.operation,\r\n          previousOperand: state.currentOperand,\r\n          currentOperand: null,\r\n        };\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        previousOperand: evaluate(state),\r\n        operation: payload.operation,\r\n        currentOperand: null,\r\n      };\r\n    case ACTIONS.CLEAR:\r\n      return {};\r\n    case ACTIONS.DELETE_DIGIT:\r\n      if (state.overwrite) {\r\n        return {\r\n          ...state,\r\n          overwrite: false,\r\n          currentOperand: null,\r\n        };\r\n      }\r\n      if (state.currentOperand == null) return state;\r\n      if (state.currentOperand.length === 1) {\r\n        return { ...state, currentOperand: null };\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        currentOperand: state.currentOperand.slice(0, -1),\r\n      };\r\n    case ACTIONS.EVALUATE:\r\n      if (\r\n        state.operation == null ||\r\n        state.currentOperand == null ||\r\n        state.previousOperand == null\r\n      ) {\r\n        return state;\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        overwrite: true,\r\n        previousOperand: null,\r\n        operation: null,\r\n        currentOperand: evaluate(state),\r\n      };\r\n  }\r\n}\r\n\r\nfunction evaluate({ currentOperand, previousOperand, operation }) {\r\n  const prev = parseFloat(previousOperand);\r\n  const current = parseFloat(currentOperand);\r\n  if (isNaN(prev) || isNaN(current)) return \"\";\r\n  let computation = \"\";\r\n  // eslint-disable-next-line default-case\r\n  switch (operation) {\r\n    case \"+\":\r\n      computation = prev + current;\r\n      break;\r\n    case \"-\":\r\n      computation = prev - current;\r\n      break;\r\n    case \"*\":\r\n      computation = prev * current;\r\n      break;\r\n    case \"รท\":\r\n      computation = prev / current;\r\n      break;\r\n  }\r\n\r\n  return computation.toString();\r\n}\r\n\r\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\r\n  maximumFractionDigits: 0,\r\n});\r\nfunction formatOperand(operand) {\r\n  if (operand == null) return;\r\n  const [integer, decimal] = operand.split(\".\");\r\n  if (decimal == null) return INTEGER_FORMATTER.format(integer);\r\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`;\r\n}\r\n\r\nfunction App() {\r\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(\r\n    reducer,\r\n    {}\r\n  );\r\n\r\n  return (\r\n    <div className=\"calculator-grid\">\r\n      <div className=\"output\">\r\n        <div className=\"previous-operand\">\r\n          {formatOperand(previousOperand)} {operation}\r\n        </div>\r\n        <div className=\"current-operand\">{formatOperand(currentOperand)}</div>\r\n      </div>\r\n      <button\r\n        className=\"span-two\"\r\n        onClick={() => dispatch({ type: ACTIONS.CLEAR })}>\r\n        AC\r\n      </button>\r\n      <button onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT })}>\r\n        DEL\r\n      </button>\r\n      <OperationButton operation=\"รท\" dispatch={dispatch} />\r\n      <DigitButton digit=\"1\" dispatch={dispatch} />\r\n      <DigitButton digit=\"2\" dispatch={dispatch} />\r\n      <DigitButton digit=\"3\" dispatch={dispatch} />\r\n      <OperationButton operation=\"*\" dispatch={dispatch} />\r\n      <DigitButton digit=\"4\" dispatch={dispatch} />\r\n      <DigitButton digit=\"5\" dispatch={dispatch} />\r\n      <DigitButton digit=\"6\" dispatch={dispatch} />\r\n      <OperationButton operation=\"+\" dispatch={dispatch} />\r\n      <DigitButton digit=\"7\" dispatch={dispatch} />\r\n      <DigitButton digit=\"8\" dispatch={dispatch} />\r\n      <DigitButton digit=\"9\" dispatch={dispatch} />\r\n      <OperationButton operation=\"-\" dispatch={dispatch} />\r\n      <DigitButton digit=\".\" dispatch={dispatch} />\r\n      <DigitButton digit=\"0\" dispatch={dispatch} />\r\n      <button\r\n        className=\"span-two\"\r\n        onClick={() => dispatch({ type: ACTIONS.EVALUATE })}>\r\n        =\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport App from \"./App\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}